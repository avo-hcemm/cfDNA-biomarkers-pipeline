<?xml version="1.0" encoding="UTF-8"?>
<tool id="modules_input_validation" name="Modules Input" version="1.6.3">
    <description>User input validation</description>

    <requirements>
        <!-- Container -->
        <container type="docker">avohcemm/biomarkersearch-mod1to6:galaxytool_2</container>
    </requirements>

    <command detect_errors="exit_code"><![CDATA[
    { 
        mkdir -p working_dir chromosomes || { echo "mkdir failed"; exit 1; } &&
        { cp "${pathtodata}" input.tar.gz && echo "Data Copy succeeded"; } || { echo "Data Copy failed"; exit 1; } &&
        { tar --strip-components=1 -xzf input.tar.gz -C working_dir && echo "Extraction succeeded"; } || { echo "Extraction failed"; exit 1; } &&
        echo "After input data copying and extraction:" &&
        ls -lh working_dir && 
        { tar -czf input_validated.tar.gz -C working_dir . && echo "Compression succeeded"; } || { echo "Compression failed"; exit 1; } &&
        echo "Main directory after input compression:" &&
        ls -lh . && 
        mkdir -p working_dir/genome_index_path || echo "mkdir failed" &&
        { cp "${genomeindextar}" genome.tar.gz && echo "Genome Copy succeeded"; } || { echo "Genome Copy failed"; exit 1; } &&
        { tar -xzf genome.tar.gz -C working_dir/genome_index_path && echo "Extraction succeeded"; } || { echo "Extraction failed"; exit 1; } &&
        echo "After genome index copying and extraction:" &&
        ls -lh working_dir/genome_index_path &&
        { tar -czf genome_index_validated.tar.gz -C working_dir/genome_index_path . && echo "Compression succeeded"; } || { echo "Compression failed"; exit 1; } &&
        echo "Main directory after genome index compression:" &&
        ls -lh . && 
        { cp "${adapterfile}" adapter.fasta && echo "Adapter Copy succeeded"; } || { echo "Adapter Copy failed"; exit 1; } &&
        grep -q '^>' adapter.fasta && echo "FASTA format check passed" || { echo "Error: Adapter file is not in FASTA format (missing '>' header line)"; exit 1; } &&
        { cp "${datainfo}" data.csv && echo "Data Info Copy succeeded"; } || { echo " Data Info Copy failed"; exit 1; } &&
        grep -q ','  data.csv && echo "CSV comma separated format check passed" || { echo "Error: Data Info file is not in csv format (missing comma)"; exit 1; } &&
        { cp "${genomeinfo}" genome.csv && echo "Genome Info Copy succeeded"; } || { echo "Genome Info Copy failed"; exit 1;} && 
        grep -q ',' genome.csv && echo "CVS comma separated format check passed" || { echo "Error: Genome Info file is not in csv format (missing ',' separator)"; exit 1; } &&
        awk -F',' '{outfile = "chromosomes/" $1 ".txt"; print $1 > outfile; close(outfile)}' genome.csv && echo "Chromosome label files created in chromosomes" &&
        echo "content of chromosomes folder"  >> debug_files_upload.txt &&
        ls -lh chromosomes >> debug_files_upload.txt &&
        { cp "${parametersinfo}" params.csv && echo "Parameters Info Copy succeeded"; } || { echo "Parameters Info Copy failed"; exit 1; } && 
        { grep -q ',' params.csv && echo "Error: Parameters Info file has more than 1 column (commas found)"; } || echo "No commas found in Parameters Info file" &&
        [ "`wc -l params.csv | awk '{print $1}'`" -lt 4 ] && { echo "Error: params.csv must contain at least 4 parameters"; exit 1; } || { echo "Parameters Info file: Line count check passed"; } &&
        echo "Main directory:" &&
        ls -lh . && 
        echo "Input data validation success!";
    } 2>&1 | tee -a debug_files_upload.txt
    ]]></command>

    <inputs>
        <param name="pathtodata" type="data" format="tar.gz" label="Compressed Data Directory (.tar.gz)"/>
        <param name="adapterfile" type="data" format="fasta" label="Adapter File" help="Upload adapter FASTA file for trimming."/>
        <param name="genomeindextar" type="data" format="tar.gz" label="Bowtie2 Genome index (.tar.gz)"/>
        <param name="genomeinfo" type="data" format="csv" label="Genome Info CSV" />
        <param name="parametersinfo" type="data" format="csv" label="Parameters Info 1-column CSV" />
        <param name="datainfo" type="data" format="csv" optional="true" label="Data Info CSV (optional)" />
    </inputs>

    <outputs>
        <data name="debug_output" format="txt" label="Debug Output Module1" from_work_dir="debug_files_upload.txt"/>
        <data name="validated_data" format="tar.gz" label="Validated Data" from_work_dir="input_validated.tar.gz"/>
        <data name="validated_genome_index" format="tar.gz" label="Validated Genome Index" from_work_dir="genome_index_validated.tar.gz"/>
        <data name="validated_adapter" format="fasta" label="Validated Adapter File" from_work_dir="adapter.fasta"/>
        <data name="validated_genomeinfo" type="data" format="csv" label="Genome Info CSV" from_work_dir="genome.csv"/>
        <data name="validated_parametersinfo" type="data" format="csv" label="Parameters Info 1-column CSV" from_work_dir="params.csv"/>
        <data name="validated_datainfo" type="data" format="csv" optional="true" label="Data Info CSV (optional)" from_work_dir="data.csv" />
        <collection name="chromosomes" label="Chromosome files" type="list">
            <discover_datasets pattern="__name_and_ext__" directory="chromosomes" ext="txt" visible="true"/>
        </collection>
    </outputs>

    <help><![CDATA[
This tool extracts your input text message and writes a debug log with the executed command and extracted contents.
    ]]></help>
</tool>
