<?xml version="1.0" encoding="UTF-8"?>
<tool id="module2to6" name="Modules 2–6" version="1.8.8">
  <description>Biomarker discovery per chromosome (pipeline modules 2–6) </description>

   <requirements>
    <container type="docker">avohcemm/biomarkersearch-mod1to6:galaxytool_2</container>
     <resource type="ram_min">64000</resource>   <!-- RAM in MB -->
      <resource type="cores_min">50</resource>    <!-- number of CPU cores -->
  </requirements>

  <command detect_errors="exit_code"><![CDATA[
    mkdir -p working_dir/jars working_dir/config "working_dir/samples/${species}" "working_dir/input/${species}" "working_dir/genome/${species}/hg38" working_dir/python &&

    echo "subfolders creation inside working directory:" > debug_files_upload.txt &&
    ls -lh working_dir >> debug_files_upload.txt &&

    cp "${aligned_data}" working_dir/samplesdata.tar.gz 2>> debug_files_upload.txt &&
    { tar --strip-components=1 --exclude='._*' -xzf working_dir/samplesdata.tar.gz -C "working_dir/samples/" 2>> debug_files_upload.txt &&
    echo "Samples bam files extraction succeeded" >> debug_files_upload.txt; } || { echo "Samples bam files extraction failed" >> debug_files_upload.txt; } &&
     echo "data samples in working directory:" >> debug_files_upload.txt &&
    ls -lhR working_dir/samples/ >> debug_files_upload.txt &&

    cp "$__tool_directory__/config/log4j2.xml" working_dir/config/log4j2.xml 2>> debug_files_upload.txt &&
    cp "$__tool_directory__/jcna-biomrkrs-v06.jar" working_dir/jars/jtool.jar 2>> debug_files_upload.txt &&  
    cp -r "$__tool_directory__/genome/${species}/hg38/"* "working_dir/genome/${species}/hg38" 2>> debug_files_upload.txt && 
    cp -r "$__tool_directory__/python/"* "working_dir/python" 2>> debug_files_upload.txt && 

    { cp "${genomeinfo}" "working_dir/input/${species}/genome.csv" 2>> debug_files_upload.txt &&
    echo "Genome data copy succeeded" >> debug_files_upload.txt; } || { echo "Genome data copy failed" >> debug_files_upload.txt; } &&
    { cp "${parametersinfo}" "working_dir/input/${species}/param.csv" 2>> debug_files_upload.txt &&
    echo "Parameters data copy succeeded" >> debug_files_upload.txt; } || { echo "Parameters data copy failed" >> debug_files_upload.txt; } &&

    echo "inside working directory after copying and extraction:" >> debug_files_upload.txt &&
    ls -lh working_dir >> debug_files_upload.txt &&

    #if $datainfo and $datainfo != "None"
      { cp "${datainfo}" "working_dir/input/${species}/data.csv" 2>> debug_files_upload.txt &&
      echo "Samples data copy succeeded" >> debug_files_upload.txt; } || { echo "Samples data copy failed" >> debug_files_upload.txt; } &&

    bash "$__tool_directory__/run_pipeline_module2to6.sh" \
      -o "working_dir" \
      "input/${species}/genome.csv" \
      "input/${species}/param.csv" \
      "input/${species}/data.csv" \
      "${species}" \
      --chromosome "${chromosomes}"
    #else
      echo "No data info provided." >> debug_files_upload.txt &&
      bash "$__tool_directory__/run_pipeline_module2to6.sh" \
      -o "working_dir" \
      "input/${species}/genome.csv" \
      "input/${species}/param.csv" \
      "${species}" \
      --chromosome "${chromosomes}"
    #end if
  ]]></command>


  <inputs>
    <param name="genomeinfo" type="data" format="csv" label="Genome_Info_CSV" />
    <param name="chromosomes" type="data" format="txt" label="Chromosome_job" />
    <param name="parametersinfo" type="data" format="csv" label="Parameters_Info_CSV" />
    <param name="datainfo" type="data" format="csv" optional="true" label="Data_Info_CSV (optional)" />
    <param name="species" type="text" label="Species" optional="false"/>
    <param name="aligned_data" type="data" format="tar.gz" label="Compressed_Sample_bam_files_Directory" />
  </inputs>

  <outputs>
    <data name="plots_dir" format="directory" label="Plots (Module2to6)" from_work_dir="plots"/>
    <data name="debug_output" format="txt" label="Debug_Output_Module2to6" from_work_dir="debug_files_upload.txt"/>
    <data name="script_output" format="txt" label="Log" from_work_dir="log.txt"/>
  </outputs>

  <help><![CDATA[
This tool runs **Modules 2–6** of the biomarker discovery pipeline.

### What it does
- Processes aligned BAM files produced by **Module 1**.  
- Uses genome and parameter CSV files provided by the user.  
- Computes Kullback–Leibler (KL) divergence and CNA (copy number alteration) composition for the selected chromosome.  
- Generates intermediate results and plots under `module2to6/` (bundled in debug output).  

### Inputs
- **Genome_Info_CSV**: CSV file containing genome configuration.  
- **Chromosome_job**: Text file specifying the chromosome to process.  
- **Parameters_Info_CSV**: CSV file with pipeline parameters.  
- **Data_Info_CSV (optional)**: CSV file with sample metadata.  
- **Species**: Target species (e.g., `human`, `mouse`).  
- **Compressed_Sample_bam_files_Directory**: `.tar.gz` archive of aligned BAM files (output from Module 1).  

### Outputs
- **Plots (Module2to6)**: Directory containing all plots generated by the pipeline (number of files may vary).  
- **Log**: Text log of the pipeline run (`log.txt`).  
- **Debug_Output_Module2to6**: Debug information and intermediate results (`debug_files_upload.txt`).

These outputs provide both the computed results and the logs/metrics for troubleshooting, bundled into the debug output.

  ]]></help>
</tool>
